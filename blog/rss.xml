<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title></title>
        <link>https://pengfei-cn.github.io/blogs/blog</link>
        <description></description>
        <lastBuildDate>Fri, 23 Sep 2022 09:47:13 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh</language>
        <item>
            <title><![CDATA[Welcome]]></title>
            <link>https://pengfei-cn.github.io/blogs/blog/Blogs</link>
            <guid>Blogs</guid>
            <pubDate>Fri, 23 Sep 2022 09:47:13 GMT</pubDate>
            <description><![CDATA[总结并梳理前端知识点做下的记录，对应的练习代码仓]]></description>
            <content:encoded><![CDATA[<p>总结并梳理前端知识点做下的记录，对应的练习<a href="https://github.com/pengfei-cn/blog-codes.git" target="_blank" rel="noopener noreferrer">代码仓</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="目录">目录<a class="hash-link" href="#目录" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="前端特性">前端特性<a class="hash-link" href="#前端特性" title="标题的直接链接">​</a></h3><ul><li><a href="/blogs/blog/frontEnd/css">css</a></li><li><a href="/blogs/blog/frontEnd/js">js</a></li><li><a href="/blogs/blog/frontEnd/html">html</a></li><li><a href="/blogs/blog/frontEnd/浏览器">浏览器</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="框架">框架<a class="hash-link" href="#框架" title="标题的直接链接">​</a></h3><ul><li><a href="/blogs/blog/framework/react">react回顾</a></li><li><a href="/blogs/blog/framework/vue">vue学习</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="工具">工具<a class="hash-link" href="#工具" title="标题的直接链接">​</a></h3><ul><li><a href="/blogs/blog/tool/webpack">webpack</a></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="日常遇到的问题及解析">日常遇到的问题及解析<a class="hash-link" href="#日常遇到的问题及解析" title="标题的直接链接">​</a></h3><ul><li><a href="/blogs/blog/questions/jsCode">JS代码中遇到的问题</a></li><li><a href="/blogs/blog/questions/interview">面试知识点</a></li><li><a href="/blogs/blog/questions/virtualDom">虚拟DOM</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[css]]></title>
            <link>https://pengfei-cn.github.io/blogs/blog/frontEnd/css</link>
            <guid>frontEnd/css</guid>
            <pubDate>Fri, 23 Sep 2022 09:47:13 GMT</pubDate>
            <description><![CDATA[1. CSS特性]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-css特性">1. CSS特性<a class="hash-link" href="#1-css特性" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="动画">动画<a class="hash-link" href="#动画" title="标题的直接链接">​</a></h3><ul><li>transition 过渡<ul><li>transition-property 过渡属性名称
transition-duration 持续时间
transition-timing-function 时间曲线
transition-delay 开始时间</li></ul></li><li>animation &amp; @keyframe<ul><li>animation-name 关键帧动画名称
animation-duration 持续时间
animation-timing-function 时间曲线
animation-delay 开始时间
animation-iteration-count 动画次数
animation-direction 是否反向播放</li><li>keyframe定义属性变化 from to</li></ul></li><li>will-change通知浏览器元素即将发生变化，从而对动效进行优化</li><li>animation step参数逐帧动画</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="chrome字体限制">chrome字体限制<a class="hash-link" href="#chrome字体限制" title="标题的直接链接">​</a></h3><ul><li>font-size&lt;12 chrome都会当作12px处理并显示，所以调试移动端界面时会有溢出问题</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="层叠上下文比较概念">层叠上下文比较概念<a class="hash-link" href="#层叠上下文比较概念" title="标题的直接链接">​</a></h3><ul><li>同层级已z-index属性及其先后顺序决定上下关系</li><li>在不同层叠上下文通过“父级元素层叠级别”来决定上下关系</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="重绘和回流性能优化">重绘和回流，性能优化<a class="hash-link" href="#重绘和回流性能优化" title="标题的直接链接">​</a></h3><ul><li>重绘: 不会影响布局的操作如改变元素的外观、风格等（如color相关属性）</li><li>回流：会影响到布局的操作如改变元素规模尺寸、布局、隐藏等<ul><li>除开改变元素尺寸布局外一些需要注意的会引起回流的操作<ul><li>改变内嵌的style属性</li><li>读取offset、client、scroll等属性</li><li>添加或者删除“可见”的DOM元素</li></ul></li></ul></li><li>相应的可以注意或者进行的性能优化<ul><li>减少对可见DOM的操作次数<ul><li>如使用documentFragment缓存操作待结束后append到body中</li><li>或者将要操作的dom先display none隐藏掉</li></ul></li><li>用变量预先缓存用到的属性，从而避免在循环中读取比如offsetWidth等属性</li><li>复杂动画效果,使用绝对定位让其脱离文档流。<ul><li>复杂动画会频繁触发回流，脱离文档流可以减少对其他元素的影响</li></ul></li><li>使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener noreferrer">requestAnimationFrame</a>更加精细的控制动画渲染</li></ul></li><li>transform和position的区别<ul><li>position结合top属性的改变会导致回流，由此制作动画效果卡顿</li><li>而transform 动画由GPU控制，支持硬件加速，带有transform、z-index、opacity、filter的元素或者3D、video、canvas元素都会创建独立的新的复合图层，整个复合图层动画的执行由GPU的复合器操纵（3D会在渲染前创建独立图层，2D则会在动画开始再前创建图层用于GPU渲染）</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="positionfixed属性">position:fixed属性<a class="hash-link" href="#positionfixed属性" title="标题的直接链接">​</a></h3><ul><li>fixed是相对于 viewport 定位，但是也有特殊情况: 当元素祖先的 transform 属性非 none 时，相对定位的容器由视口改为该祖先</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-css效果实现">2. CSS效果实现<a class="hash-link" href="#2-css效果实现" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="文本移除省略号">文本移除省略号<a class="hash-link" href="#文本移除省略号" title="标题的直接链接">​</a></h3><ul><li>单行文本<ul><li>统一css：<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">overflow: hidden;//溢出隐藏</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">white-space: nowrap;//空间溢出换行</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">text-overflow: ellipsis;//文本移除省略号替代</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ul></li><li>webkit内核浏览器处理<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    display: -webkit-box;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -webkit-line-clamp: 3;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li>其他内核浏览器处理方案：
用js通过字体大小和line-height以及盒子得height限制来实现溢出添加省略号，伪类添加省略号图片或者替换掉最后几个文字为省略号等方法</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="翻转卡片动画实现">翻转卡片动画实现<a class="hash-link" href="#翻转卡片动画实现" title="标题的直接链接">​</a></h3><ul><li>3D视角设置背面不可见设置动画并旋转正反面即可实现<div class="language--css codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language--css codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  transform-style: preserve-3d; // 设置为3D</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  perspective: 5000px; // 3D 视角距离</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  perspective-origin: 50% 50%; // 观察者的位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  .front {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      z-index: 3;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      transform: rotateY(0deg);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  .back {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      z-index: 2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      transform: rotateY(180deg);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="渐变色略过效果">渐变色略过效果<a class="hash-link" href="#渐变色略过效果" title="标题的直接链接">​</a></h3><ul><li>按钮白光掠过效果即可用如下渐变白色光条设置translate旋转一下并通过动画实现移动即可实现<div class="language--js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language--js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    background: linear-gradient(to right, rgba(255, 255, 255, 0) 0, rgba(255, 255, 255, .3) 50%, rgba(255, 255, 255, 0) 100%);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="text-shadow实现复制文字">text-shadow实现复制文字<a class="hash-link" href="#text-shadow实现复制文字" title="标题的直接链接">​</a></h3><ul><li>利用阴影效果实现文字的复制<div class="language--js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language--js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">text-shadow: .5em 0, 1em 0, 1.5em 0;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="grid布局">grid布局<a class="hash-link" href="#grid布局" title="标题的直接链接">​</a></h3><ul><li><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener noreferrer">grid二维网格布局</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[html]]></title>
            <link>https://pengfei-cn.github.io/blogs/blog/frontEnd/html</link>
            <guid>frontEnd/html</guid>
            <pubDate>Fri, 23 Sep 2022 09:47:13 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[js]]></title>
            <link>https://pengfei-cn.github.io/blogs/blog/frontEnd/js</link>
            <guid>frontEnd/js</guid>
            <pubDate>Fri, 23 Sep 2022 09:47:13 GMT</pubDate>
            <description><![CDATA[事件循环机制]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="事件循环机制">事件循环机制<a class="hash-link" href="#事件循环机制" title="标题的直接链接">​</a></h2><p>所有任务都在主线程上执行，即执行栈(Execution Context Stack)，而JS执行任务的队列可以划分为微任务（ES6中称作PromiseJobs）和宏任务（ES6中称作ScriptJobs）队列，执行顺序可以分为三步</p><ol><li>主线程执行所有的初始化同步任务代码</li><li>读取并执行微任务队列的全部任务</li><li>读取并执行所有的宏任务</li></ol><ul><li>具体执行顺序可以看作 主程序代码—&gt;process.nextTick—&gt;Promise.then|async await后的语句——&gt;setTimeout|setInterval——&gt;setImmediate——&gt; I/O——&gt;UI rendering<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 以v8引擎举例</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">setImmediate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">setTimeout</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Promise</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">resolve</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">resolve</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">then</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">process</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">nextTick</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">7</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getData</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">8</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">readData</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">9</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getData</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">readData</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>  输出结果为<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">8 // 上面都为主程序执行的同步代码的输出</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">7 // process.nextTick</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">5 // promise.then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">10 // await后</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 // setImmediate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2 // setTimeout</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="原型链">原型链<a class="hash-link" href="#原型链" title="标题的直接链接">​</a></h2><ul><li>简单来说就是构造函数会有一个prototype属性指向原型对象，而由此函数创建出的实例会有一个隐式的<strong>proto</strong>属性同样指向原型对象，且原型对象中默认带有 constructor 属性指向的是构造函数。</li><li>当访问实例上没有的属性及方法时，会沿着原型链一直向上遍历原型对象上是否有对应的属性和方法。</li><li>原型链的顶端是Object的原型对象</li><li>instanceof、isPrototypeOf可以用来检测原型链的继承关系<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">Person</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">name</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> name</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method-variable function-variable method function property-access" style="color:#d73a49">sayName</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">Child</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> personB </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Person</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Banana"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">Child</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">prototype</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> personB</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> child </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Child</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">child</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">sayName</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> person </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Person</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Apple"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">person</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">sayName</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">child</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">__proto__</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token class-name">Child</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">prototype</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 实例的__proto__指向原型对象，prototype一样</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Child</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">prototype</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> personB</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 指向原型对象，</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Child</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">prototype</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">constructor</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token maybe-class-name">Person</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// constructor指向原型对象new Person("Banana")对应的构造函数也就是Person</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">child </span><span class="token keyword" style="color:#00009f">instanceof</span><span class="token plain"> </span><span class="token class-name">Person</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">child </span><span class="token keyword" style="color:#00009f">instanceof</span><span class="token plain"> </span><span class="token class-name">Object</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// instanceof检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Person</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">prototype</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">isPrototypeOf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">child</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// isPrototypeOf检测一个对象是否存在于另一个对象的原型链</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="关于es6和commonjs模块化问题"><a href="https://zhuanlan.zhihu.com/p/422704350" target="_blank" rel="noopener noreferrer">关于ES6和CommonJS模块化问题</a><a class="hash-link" href="#关于es6和commonjs模块化问题" title="标题的直接链接">​</a></h2><ol><li><ul><li>CommonJS 模块是顺序执行的，遇到 require 时，加载并执行对应模块的代码，然后再回来执行当前模块的代码。</li><li>在循环引用时，在模块执行前就会创建好对应的模块对象并进行缓存，尽管是一个空对象，但是一般不会导致JS报错。</li></ul></li><li><ul><li>ES6 模块借助 JS 引擎实现，具体分为连接和评估阶段，从效果上看，子模块先于父模块被执行。</li><li>ES6 模块的导入导出语句的位置不影响模块代码语句的执行结果。</li></ul></li></ol>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[浏览器]]></title>
            <link>https://pengfei-cn.github.io/blogs/blog/frontEnd/浏览器</link>
            <guid>frontEnd/浏览器</guid>
            <pubDate>Fri, 23 Sep 2022 09:47:13 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[webpack]]></title>
            <link>https://pengfei-cn.github.io/blogs/blog/tool/webpack</link>
            <guid>tool/webpack</guid>
            <pubDate>Fri, 23 Sep 2022 09:47:13 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[react]]></title>
            <link>https://pengfei-cn.github.io/blogs/blog/framework/react</link>
            <guid>framework/react</guid>
            <pubDate>Fri, 23 Sep 2022 09:47:13 GMT</pubDate>
            <description><![CDATA[基础概念]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="基础概念">基础概念<a class="hash-link" href="#基础概念" title="标题的直接链接">​</a></h2><p>Virtual DOM、Diff算法、JSX、props、state、数据不可变性、class、export default&amp;export&amp;import|modules.export&amp;exports&amp;require的定义、react中key的作用（对比vue）</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="详细">详细<a class="hash-link" href="#详细" title="标题的直接链接">​</a></h3><ul><li>JSX：（JavaScript 的语法扩展）可以使用js中的变量以及函数。因为 JSX 的特性更接近 JavaScript 而不是 HTML , 所以 React DOM 使用 camelCase 小驼峰命名！ 来定义属性的名称，而不是使用 HTML 的属性名称。</li><li>组件props：组件名称必须以大写字母开头</li><li>函数定义 无状态</li><li>class定义 有状态</li><li>props（组件的参数）不能修改props只能当成纯函数的参数使用！
propTypes验证器，限制props参数的类型或者使用正则限制参数，错误则返回error对象 MyComponent.propTypes = {data:React.PropTypes.filter}</li><li>state （组件的状态）自顶向下或单向数据流,可修改。</li><li>extends 和 super： ES5 的继承，采用原型链继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。ES6 的继承机制完全不同，使用extends，实质是先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。</li><li>事件处理：onClick={activateLasers}，绑定属性的命名采用驼峰式写法，传入一个函数并加大括号作为事件处理函数。<ul><li>this的绑定问题： click事件时，this绑定到执行的上下文中而不是定义的上下文，即div支撑实例而不是class的实例，因此会出现问题。</li><li>解决方案:  bind绑定/匿名箭头回调函数重复渲染子组件问题/属性初始化语法</li></ul></li><li>性能优化<ul><li>生命周期函数shouldComponentUpdate: 它是在重新渲染过程开始前触发,重写此函数，比如根据props或status的部分数据改变时才重新渲染更新DOM。</li><li>组件继承React.PureComponent相当于在shouldComponentUpdate中定义了浅比较。但这种浅比较会忽略属性或状态突变的情况。  </li></ul></li><li><a href="https://www.reactjscn.com/tutorial/tutorial.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%8F%AF%E5%8F%98%E6%80%A7%E5%9C%A8React%E5%BD%93%E4%B8%AD%E9%9D%9E%E5%B8%B8%E9%87%8D%E8%A6%81" target="_blank" rel="noopener noreferrer">不可变性</a><ul><li>深拷贝 递归遍历赋值;</li><li>浅拷贝 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener noreferrer">Object.assign(target,source)</a>  </li></ul></li><li>条件渲染<ul><li>大括号里js表达式结合JSX实现，三元表达式</li><li>&amp;&amp;与运算表达式</li><li>根据条件判断修改render返回值，render返回null即不渲染  </li></ul></li><li>高阶组件：高级函数/函数式编程</li><li>第三方库：refs的使用</li><li>受控组件与非受控组件的选择</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[vue]]></title>
            <link>https://pengfei-cn.github.io/blogs/blog/framework/vue</link>
            <guid>framework/vue</guid>
            <pubDate>Fri, 23 Sep 2022 09:47:13 GMT</pubDate>
            <description><![CDATA[vue 入门]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="vue-入门">vue 入门<a class="hash-link" href="#vue-入门" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="vue-30新特性">vue 3.0新特性<a class="hash-link" href="#vue-30新特性" title="标题的直接链接">​</a></h2><ul><li>vue3.0<ul><li>getter、setter,defineProperty到Proxy（监听 Array 的变化）（前面降级兼容ie11）</li><li>支持typescript</li><li>对象式组件生命</li><li>slot默认编译为函数</li></ul></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[JS代码问题]]></title>
            <link>https://pengfei-cn.github.io/blogs/blog/questions/jsCode</link>
            <guid>questions/jsCode</guid>
            <pubDate>Fri, 23 Sep 2022 09:47:13 GMT</pubDate>
            <description><![CDATA[代码常见问题及知识点]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="代码常见问题及知识点">代码常见问题及知识点<a class="hash-link" href="#代码常见问题及知识点" title="标题的直接链接">​</a></h2><ol><li><p>this指向得改变，以及箭头函数和合理使用。<a href="https://segmentfault.com/a/1190000008400124" target="_blank" rel="noopener noreferrer">JavaScript 的 this 指向问题深度解析</a></p><ul><li>this一般指向得是函数运行时所在的环境对象，所以用箭头函数的时候，this有时候会获取不到页面中触发事件的dom。如下输出得就会是undefined获取不到dom内容。setTimeout中得this会指向全局对象window，也可以用箭头函数避免。</li><li>在箭头函数出现之前，每个新定义的函数都有它自己的 this值（在构造函数的情况下是一个新对象，在严格模式的函数调用中为 undefined，如果该函数被作为“对象方法”调用则为基础对象等）。</li></ul><div class="language--javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language--javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;div class="test"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    wdwdaawd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/div&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;script type="text/javascript"&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$(function () {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $(".test").on("click",()=&gt;{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log($(this).html());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    })</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">})</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;/script&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>变量定义</p><ul><li>var变量声明会提前是，而let不会，const必须要初始化。</li><li>尽量不使用var，变量定义不加前缀的话就会变成全局变量。</li><li>const定义常量，但是定义引用类型例如对象或者数组时可以改变里面内容。</li></ul><div class="language--javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language--javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">const car = {type:"Fiat", model:"500", color:"white"};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">car.color = "red";</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>类型转换注意</p><ul><li>如果parseInt没有提供第二个参数，则前缀为 ’0x’ 的字符串会被当作十六进制，前缀为 ’0′ 的字符串被当作八进制。所有其它字符串都被当作是十进制的。</li></ul></li><li><p>eval使用得安全问题</p><ul><li><a href="http://www.vuln.cn/8007" target="_blank" rel="noopener noreferrer">关于eval的劫持操作</a></li></ul></li><li><p><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener noreferrer">js的运行机制</a></p><ul><li><p>同步任务-主线程，异步任务-任务队列，主线程空闲时从任务队列中读取事件，event loop;简单例子如下：</p><div class="language--JS codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language--JS codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">for (var i = 0; i &lt; 3; i++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    setTimeout(() =&gt; console.log(i), 1000);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//输出为等待1s之后同时输出3 3 3，当然若采用let则会同时输出0 1 2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ul></li><li><p>模板字符串做参数</p><ul><li><p>第一个参数的值始终是字符串值的数组。 其余参数获取传递到模板字符串中的表达式的值</p><div class="language--javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language--javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">function getPersonInfo(one, two, three) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  console.log(one);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  console.log(two);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  console.log(three);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">const person = "Lydia";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">const age = 21;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">getPersonInfo`${person} is ${age} years old`;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> //输出：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> //["", "is", "years old"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> //Lydia</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> //21</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ul></li><li><p>引用类型比较</p><ul><li><p>和原始类型不同，引用类型比较的是引用对象是否相同。</p><div class="language--javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language--javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">function age(){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if(age === {age:18}){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.log('Y1');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } else if(age == {age:18}){</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.log('Y2');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        console.log('N');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">age({age:18});</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//输出N</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ul></li><li><p>扩展运算符</p><ul><li><p>字符串是可迭代的。 扩展运算符将迭代的每个字符映射到一个元素。</p></li><li><p>扩展运算符作为参数，返回一个带参数的数组</p><div class="language--javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language--javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">function getAge(...args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  console.log(args);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  console.log(typeof args);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">getAge(21,11);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//[21,11]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//object</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language--javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language--javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">console.log([..."wdnmd"])</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//['w','d','n','m','d']</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noopener noreferrer">...运算符解析</a></p></li><li><p>1.做为剩余参数，类似于apply方法</p><div class="language--javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language--javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">function test(length, ...numbers) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(Object.prototype.toString.call(numbers))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    console.log(numbers)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test(4,1,2,3,4)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test.apply(null, [4,1,2,3,4])</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>输出结果都是</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[object Array]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[1, 2, 3, 4]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>2.spread展开(浅拷贝)，类似于数组方法slice()和对象方法Object.assign()</p><div class="language--javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language--javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">let obj = {a: 1, b: [1,2]}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">let copy = {...obj}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">obj.a = 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">obj.b[0] = 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">console.log(obj)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">console.log(copy)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>输出结果: 复制后a未被修改，而数组属性b仍收到影响</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{a: 2, b: Array(2)}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">a: 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">b: (2) [2, 2]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">{a: 1, b: Array(2)}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">a: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">b: (2) [2, 2]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ul></li><li><p>Set和Map结构</p><ul><li>Set的结构：键集合，不重复
WeakSet: 因为不算引用考虑垃圾回收的不确定性所以 WeakSet 不可遍历。（WeakSet 的一个用处，是储存 DOM 节点）<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> 1. 成员只能是对象</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> 2. WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li>Map结构：键值对集合，比对象更自由</li></ul></li><li><p>性能瓶颈：<a href="https://juejin.im/post/5c6e064c51882562eb50fc18" target="_blank" rel="noopener noreferrer">参考</a></p><ul><li>减少对dom的操作，经常使用的dom变量预先使用变量存储</li><li>利用事件冒泡对事件父级元素进行事件委托，减少事件的绑定和遍历dom元素时重绘dom消耗的时间</li><li>parseInt并不是很好的选择，例子<a href="https://jsperf.com/coercion-vs-casting/3" target="_blank" rel="noopener noreferrer">性能</a></li><li>拼接字符串尽量不使用+，es6可以用字符串模板</li></ul></li><li><p>深拷贝实现 递归赋值</p></li><li><p>对象属性</p><ul><li>Object.getOwnPropertyDescriptor(obj，prop) 返回指定对象上一个自有属性对应的属性描述</li><li>Object.getOwnPropertyDescriptors(obj)</li><li>Object.defineProperties(obj,{属性们}) 修改指定对象上一个自有属性对应的属性描述</li><li>Object.create(原始对象)</li><li>Object.keys(所有属性，仅自身)</li><li>for in (所有属性，包括原型链)</li></ul></li><li><p>监听对象或者数组得变化: <a href="https://www.cnblogs.com/yayaxuping/p/10951738.html" target="_blank" rel="noopener noreferrer">参考1</a>,<a href="https://www.jb51.net/article/162584.htm" target="_blank" rel="noopener noreferrer">参考2</a></p></li><li><p>JS基本类型的临时包装和基本类型的方法继承</p><ul><li>基本包装类型的实例只会存在于一行代码执行的一瞬间，然后就会被立即销毁</li></ul><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> str </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'test'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">str </span><span class="token keyword" style="color:#00009f">instanceof</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">prototype</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">isPrototypeOf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">str</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">__proto__</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">prototype</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>History.replaceState()干掉带token得链接</p></li><li><p>闭包中this的指向： 指向window/null</p></li><li><p>多维数组的toString方法</p><div class="language--javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language--javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[1,[2,[3,4,[4]]]].toString()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//结果是"1,2,3,4"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>JS中函数内部参数详解
按值传递，参数作为临时变量在函数作用域内</p></li></ol>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[虚拟DOM问题]]></title>
            <link>https://pengfei-cn.github.io/blogs/blog/questions/virtualDom</link>
            <guid>questions/virtualDom</guid>
            <pubDate>Fri, 23 Sep 2022 09:47:13 GMT</pubDate>
            <description><![CDATA[jsx转化为vdom--h函数]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="jsx转化为vdom--h函数">jsx转化为vdom--h函数<a class="hash-link" href="#jsx转化为vdom--h函数" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="渲染到真实dom--render函数">渲染到真实DOM--render函数<a class="hash-link" href="#渲染到真实dom--render函数" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="diff算法-react-diff">diff算法-react-diff<a class="hash-link" href="#diff算法-react-diff" title="标题的直接链接">​</a></h2><ul><li>tree</li><li>component</li><li>element<ul><li>key的作用</li><li>节点比较后的移动、删除、插入操作</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="关于虚拟dom">关于虚拟dom<a class="hash-link" href="#关于虚拟dom" title="标题的直接链接">​</a></h2><ul><li>并不是快</li><li>是不是最小代价</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[面试题]]></title>
            <link>https://pengfei-cn.github.io/blogs/blog/questions/interview</link>
            <guid>questions/interview</guid>
            <pubDate>Fri, 23 Sep 2022 09:47:13 GMT</pubDate>
            <description><![CDATA[margin三个值的时候是什么？百分比时相对基准？]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="margin三个值的时候是什么百分比时相对基准">margin三个值的时候是什么？百分比时相对基准？<a class="hash-link" href="#margin三个值的时候是什么百分比时相对基准" title="标题的直接链接">​</a></h2><ul><li>padding 和 margin 的无论上下左右 值 都是基于父元素的宽度；</li><li>margin： 四个值：上右下左；三个值：上，左右，下；两个值：上下，左右；</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="对象调用的this指向等等this">对象调用的this指向等等？this！<a class="hash-link" href="#对象调用的this指向等等this" title="标题的直接链接">​</a></h2><ul><li>this指向得改变，以及箭头函数和合理使用。<a href="https://segmentfault.com/a/1190000008400124" target="_blank" rel="noopener noreferrer">JavaScript 的 this 指向问题深度解析</a>。this一般指向得是函数运行时所在的环境对象</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="事件冒泡和捕获顺序">事件冒泡和捕获顺序？<a class="hash-link" href="#事件冒泡和捕获顺序" title="标题的直接链接">​</a></h2><ul><li>addEventListener的第三个参数false默认冒泡，true捕获</li><li>先捕获，然后到目标事件，再冒泡；<ul><li>事件冒泡的概念下在p元素上发生click事件的顺序应该是p -&gt; div -&gt; body -&gt; html -&gt; document</li><li>事件捕获的概念下在p元素上发生click事件的顺序应该是document -&gt; html -&gt; body -&gt; div -&gt; p</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="script标签的属性js加载性能优化">script标签的属性，js加载性能优化<a class="hash-link" href="#script标签的属性js加载性能优化" title="标题的直接链接">​</a></h2><ul><li>prefetch, preload, dns-prefetch，defer和async</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="正则表达式">正则表达式<a class="hash-link" href="#正则表达式" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="图片使用img-和-div的区别">图片使用img 和 div的区别<a class="hash-link" href="#图片使用img-和-div的区别" title="标题的直接链接">​</a></h2><ul><li>img:有alt属性，便于辅助阅读；属于html结构，预先加载，可以右键另存为；alt属性利于seo；通过src获取；行内替换元素，类似inline-block；方便实现懒加载；</li><li>bg-image：属于css，在html结构加载完成之后进行加载；需要设置background属性来实现图片的正常显示；</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="行内和块级区别">行内和块级区别<a class="hash-link" href="#行内和块级区别" title="标题的直接链接">​</a></h2><ul><li>行内元素：</li><li>块级元素：独占一行，盒模型宽高边距等</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="语义化标签">语义化标签<a class="hash-link" href="#语义化标签" title="标题的直接链接">​</a></h2><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">main，aside，article，footer，header  </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="js垃圾回收机制v8的垃圾回收机制是什么标记清楚内存整理">js垃圾回收机制(v8的垃圾回收机制是什么？标记清楚+内存整理)<a class="hash-link" href="#js垃圾回收机制v8的垃圾回收机制是什么标记清楚内存整理" title="标题的直接链接">​</a></h2><ul><li>值赋值为null</li><li>标记清除定时回收机制</li><li>老的ie,有一部分对象为c--中的com，如dom和bom，采用引用计数，循环引用不会被移除的问题</li><li>解除变量的引用，变量赋值为null     </li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="闭包优缺点如何释放">闭包，优缺点，如何释放<a class="hash-link" href="#闭包优缺点如何释放" title="标题的直接链接">​</a></h2><ul><li>不循环引用，外部dom变量保存在副本中，然后将dom元素设置为null</li><li>闭包中的this</li><li>值赋值为null</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="移动端1px问题">移动端1px问题<a class="hash-link" href="#移动端1px问题" title="标题的直接链接">​</a></h2><ul><li>css像素|逻辑像素和物理像素|设备像素的区别；pc是1比1，移动端为了显示更高清，一个逻辑像素可能占用两个物理，导致1px显示出现问题</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="对象原型链构造函数new之后的操作">对象原型链，构造函数，new之后的操作<a class="hash-link" href="#对象原型链构造函数new之后的操作" title="标题的直接链接">​</a></h2><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">this</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">constructor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">prototype</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">__proto__(Object.getPrototypeOf)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="手写promiseall">手写promise.all<a class="hash-link" href="#手写promiseall" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="防抖">防抖：<a class="hash-link" href="#防抖" title="标题的直接链接">​</a></h2><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```-js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//防抖：n秒内只触发一次，如果变化过快则清除计时器</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    function debounce(func,wait) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      let timeout;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      return function () {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let context = this;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let args = arguments;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (timeout) clearTimeout(timeout);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let callNow = !timeout;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        timeout = setTimeout(() =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          timeout = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }, wait)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (callNow) func.apply(context, args)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="节流">节流：<a class="hash-link" href="#节流" title="标题的直接链接">​</a></h2><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```-js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">//节流：触发过快时没n秒执行一次</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        function throttle(func, wait) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          let timeout;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          return function() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            let context = this;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            let args = arguments;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (!timeout) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              timeout = setTimeout(() =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                timeout = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                func.apply(context, args)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              }, wait)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="12mapparseintparseint参数问题">['1','2']<!-- -->.map(parseInt)，parseInt参数问题<a class="hash-link" href="#12mapparseintparseint参数问题" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="为什么减少http请求数量能优化网页速度三次握手四次挥手得详情">为什么减少http请求数量能优化网页速度，三次握手四次挥手得详情<a class="hash-link" href="#为什么减少http请求数量能优化网页速度三次握手四次挥手得详情" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="https流程詳解">HTTPS流程詳解<a class="hash-link" href="#https流程詳解" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="闭包中this的指向">闭包中this的指向<a class="hash-link" href="#闭包中this的指向" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="首页白屏优化方案">首页白屏优化方案<a class="hash-link" href="#首页白屏优化方案" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="react和vue的具体差别">react和vue的具体差别<a class="hash-link" href="#react和vue的具体差别" title="标题的直接链接">​</a></h2><ul><li>vue中的diff算法：交叉比较？</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="遇到的没有记清楚的问题回顾">遇到的没有记清楚的问题回顾<a class="hash-link" href="#遇到的没有记清楚的问题回顾" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="git-rebase管理多个分支的commit">git rebase管理多个分支的commit<a class="hash-link" href="#git-rebase管理多个分支的commit" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="对分支commit的合并">对分支commit的合并<a class="hash-link" href="#对分支commit的合并" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="同一个commit复制粘贴到不同分支">同一个commit复制粘贴到不同分支<a class="hash-link" href="#同一个commit复制粘贴到不同分支" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="git-commit规范">git <a href="https://juejin.im/post/5afc5242f265da0b7f44bee4" target="_blank" rel="noopener noreferrer">commit规范</a><a class="hash-link" href="#git-commit规范" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="bfc的定义和作用">BFC的定义和作用<a class="hash-link" href="#bfc的定义和作用" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="css匹配规则">css匹配规则<a class="hash-link" href="#css匹配规则" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="从右到左匹配避免无效匹配">从右到左匹配避免无效匹配<a class="hash-link" href="#从右到左匹配避免无效匹配" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="new一个对象发生了什么深入研究-ecaovo-对象">new一个对象发生了什么深入研究（ EC，AO，VO 对象）<a class="hash-link" href="#new一个对象发生了什么深入研究-ecaovo-对象" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="generatoryield是什么">generator/yield是什么<a class="hash-link" href="#generatoryield是什么" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="回流和重绘documentfragment">回流和重绘/DocumentFragment<a class="hash-link" href="#回流和重绘documentfragment" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="理解json作为数据格式和js-object的区别如何互相转换">理解json作为数据格式和js object的区别，如何互相转换<a class="hash-link" href="#理解json作为数据格式和js-object的区别如何互相转换" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="遇到的没有记清楚的问题回顾-1">遇到的没有记清楚的问题回顾<a class="hash-link" href="#遇到的没有记清楚的问题回顾-1" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="git-rebase管理多个分支的commit-1">git rebase管理多个分支的commit<a class="hash-link" href="#git-rebase管理多个分支的commit-1" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="重绘和回流性能优化">重绘和回流，性能优化<a class="hash-link" href="#重绘和回流性能优化" title="标题的直接链接">​</a></h2><ul><li>transform和position的区别</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="bfc的具体定义和清除bfc问题的方法">BFC的具体定义和清除BFC问题的方法<a class="hash-link" href="#bfc的具体定义和清除bfc问题的方法" title="标题的直接链接">​</a></h2><ul><li>定义：</li><li>方法：</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="findmissing1012111416916-数组-----寻找数组中缺失的-数字">findMissing(<!-- -->[10,12,11,14,16]<!-- -->,9,16) 数组-----寻找数组中缺失的 数字<a class="hash-link" href="#findmissing1012111416916-数组-----寻找数组中缺失的-数字" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="react中的数据immuteble和vue中的数据驱动">React中的数据immuteble和Vue中的数据驱动<a class="hash-link" href="#react中的数据immuteble和vue中的数据驱动" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="react新版的hooksvue30新更新的东西">React新版的hooks，VUE3.0新更新的东西<a class="hash-link" href="#react新版的hooksvue30新更新的东西" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="bfc的定义和作用-1">BFC的定义和作用<a class="hash-link" href="#bfc的定义和作用-1" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="react中shouldcomponentupdate的具体作用">React中shouldComponentUpdate的具体作用<a class="hash-link" href="#react中shouldcomponentupdate的具体作用" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="react中receivedprops生命周期的具体作用它做到了哪里的优化">React中receivedProps生命周期的具体作用，它做到了哪里的优化<a class="hash-link" href="#react中receivedprops生命周期的具体作用它做到了哪里的优化" title="标题的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="为什么js选择快速排序而不选择归并排序">为什么js选择快速排序而不选择归并排序<a class="hash-link" href="#为什么js选择快速排序而不选择归并排序" title="标题的直接链接">​</a></h2>]]></content:encoded>
        </item>
    </channel>
</rss>